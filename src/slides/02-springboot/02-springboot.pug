section
  h1 Multitenant Java Code

section
  img.medium(src="../../../resources/images/boot-logo.png")
  h3 Spring Boot
  ul
    li Fastest and cleanest way to start a JVM project
    li Opinionated conventions but fully configurable
    li Seamlessly use Groovy or Java or Kotlin
    li Run locally as an executable jar or war

section
  h2 Spring Boot Features
  ul
    li Spring Data JPA / Hibernate / REST
    li Data Migrations with Flyway
    li Externalized Properties & Profiles
    li Spring Security simplified

section
  h2 Oh and one more thing
  ul
    li
      strong No XML at all!
    li All Java config (even web.xml)

section
  h3 How to identify the tenant?
  ul
    li URL Subdomain
      br
      | necode.amegala.com, prairie.amegala.com
    li Attribute on User
      br
      | { user: 'jeff', company: 'necode' }
    li Session variable, other?

section
  h2 Configuring Multitenancy
  p A few things to configure
  ul
    li Tenant Selector
    ul
      li Servlet Filter
      li UI Screen selection
    li Hibernate CurrentTenantIdentifierResolver
    li Hibernate MultiTenantConnectionProvider
    li PersistenceConfig

section
  h4 MultiTenant ServletFilter
  pre.
    <code class="groovy" data-trim data-noescape>
    public class MultiTenantServletFilter implements Filter {
      @Autowired
      MultitenantService multitenantService

      @Override
      public void doFilter(ServletRequest req, ServletResponse res,
                           FilterChain chain) {
        multitenantService.setClientName(extractSubdomain(req))

        chain.doFilter(req, res)
      }

      String extractSubdomain(ServletRequest req) {
        InternetDomainName.from(req.serverName).parts().get(0)
      }
    }

    </code>

section
  h4 Tenant in ThreadLocal
  pre.
    <code class="groovy" data-trim data-noescape>
      @Service
      class MultitenantService {
          String getClientName() {
              ThreadLocalUtil.getThreadVariable(
                MedispendConstants.REQUEST_SUBDOMAIN)
          }

          void setClientName(String clientName) {
              ThreadLocalUtil.setThreadVariable(
                MedispendConstants.REQUEST_SUBDOMAIN, clientName)
          }
      }

    </code>

section
  h4 Tenant Resolver Impl
  pre.
    <code class="groovy" data-trim data-noescape>
      public class TenantIdentifierResolverImpl implements
                               CurrentTenantIdentifierResolver {
         @Autowired
         MultitenantService multitenantService

         @Override
         public String resolveCurrentTenantIdentifier() {
             //Set in MultiTenantServletFilter
             multitenantService.clientName ?: 'UNSPECIFIED_SUBDOMAIN'
         }

         @Override
         public boolean validateExistingCurrentSessions() {
             return true;
         }
     }

    </code>

section
  h4 Multitenant Connection Provider
  pre.
    <code class="groovy" data-trim data-noescape>
    public class MultiTenantConnectionProviderImpl
              implements MultiTenantConnectionProvider {
      @Override
      public Connection getConnection(String tenantIdentifier) {
          Connection connection = getAnyConnection()
          try {
              connection.setCatalog(tenantIdentifier)
          }
          catch ( SQLException e ) {
              closeConnection(connection)
              throw e
          }
          return connection
      }
    }

    </code>

section
  h4 Persistence Config
  pre.
    <code class="groovy" data-trim data-noescape>
    @Configuration
    @Profile('!test')
    class PersistenceConfig {

        @Bean
        LocalContainerEntityManagerFactoryBean entityManagerFactory() {
            builder.dataSource(dataSource).packages('com.sheetsj')
                .properties([
    //Valid values - DATABASE, SCHEMA, or DISCRIMINATOR
    'hibernate.multiTenancy' : 'SCHEMA',
    'hibernate.tenant_identifier_resolver' : multiTenantIdentifierResolver,
    'hibernate.multi_tenant_connection_provider': multiTenantProvider
                ]).build()
        }
    }

    </code>

section
  h2 Configured. Now What?
  ul
    li Just write code as if you have only one tenant
    li 95% of your code does not care that there are multi schemas
    li Example....

section
  h4 Spring Data JPA Entity
  pre.
    <code class="groovy" data-trim data-noescape>
    @Entity
    class Customer {

      @Id
      @Column
      @GeneratedValue(strategy = GenerationType.IDENTITY)
      Long id

      @Column
      String email

      @Column
      String firstName

      @Column
      String lastName
    }

    </code>

section
  h4 Spring Data JPA Query
  pre.
    <code class="groovy" data-trim data-noescape>
    @RepositoryRestResource
    interface CustomerRepository extends JpaRepository&lt;Customer, Long> {

      Customer findByEmail(String email)

      List&lt;Customer> findByEmailIn(List&lt;String> emails)

      List&lt;Customer> findByEmailAndLastName(String email, String lastName)

      List&lt;Customer> findByLastNameOrderByFirstNameAsc(String lastName)
    }

    </code>
