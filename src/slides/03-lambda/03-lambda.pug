section
  h1 Lambda & Micronaut

section
  h2
    img(src="../../../resources/images/aws.png")
    | &nbsp; Lambda
  ul
    li Functions as a service
    li Node.js, Java JVM, C#, Go, Python
    li No worrying about app servers for functional services
    li Only pay for what you use (compute time + requests)

section
  h2 Lambda Use Cases
  img(src="../../../resources/images/lambda-lambda-lambda.jpg")
  ul.no-bullets
    li Event/Stream Processing
    li Internet of Things backend
    li Webapps *(maybe)
  br
  a(href="http://revengeofthenerds.wikia.com/" target="_blank").citation http://revengeofthenerds.wikia.com/

section
  h2 Lambda Webapps
  img(src="../../../resources/images/lambda-arch.png")

section
  h3 AWS Lamba Console
  img(src="../../../resources/images/lambda-config.png")

section
  img(src="../../../resources/images/micronaut.png")
  ul
    li Modern JVM light-weight microservices
    li Compile-time dependency injection
    li Built for APIs and Serverless
    li Like Spring-boot, but compile-time speed

section
  img.venti(src="https://media.giphy.com/media/JJhiRdcYfcokU/giphy.gif")
  h3 Your First Micronaut Lambda
  ul
    li http://sdkman.io/ `sdk install micronaut`
    li `mn create-function grachio --lang groovy`
    li IntelliJ - Enable annotation processing
    li Gradle AWS Plugin is already setup for you
  br
  a(href="https://media.giphy.com/media/JJhiRdcYfcokU/giphy.gif" target="_blank").citation https://media.giphy.com/media/JJhiRdcYfcokU/giphy.gif

section
  h4 Micronaut Simple Lambda
  pre.
    <code class="groovy" contentEditable>@Field
    @Inject
    HelloService helloService

    Message hello(Person person) {
        helloService.hello(person)
    }
    </code>

section
  h4 Micronaut Project Lambda
  pre.
    <code class="groovy" contentEditable>@Field static final Logger log = LoggerFactory.getLogger('grachio.GrachioFunction')

    @Field @Inject SheetsService sheetsService
    @Field @Inject DarkSkyService darkSkyService

    Map&lt;String, Object> grachio() {
      log.debug 'starting grachio function'

      List rachioData = sheetsService.getRachioData().takeRight(10)

      def result = [
        rachioData: rachioData.collect {
          [
            date: it.date,
            waterMinutes: it.waterMinutes,
            weather: darkSkyService.getWeather(it.date)?.daily?.data[0]
          ]
        }
      ]

      log.debug('result is {}', result)
      result
    }
    </code>

section
  h3 Lambda Java Deploy
  ul
    li Complicated Manual process
    li Micronaut manual options
    li AWS Cloudformation
    li Terraform
    li Gradle AWS plugin

section
  h4 Gradle Deploy Setup
  pre.
    <code class="groovy" contentEditable>if(new File("${System.getProperty("user.home")}/.aws/credentials").exists()) {
        task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
            functionName = "grachio"
            handler = "grachio.GrachioFunction::grachio"
            role = "arn:aws:iam::${aws.accountId}:role/service-role/lambda_basic_execution"
            runtime = com.amazonaws.services.lambda.model.Runtime.Java8
            zipFile = shadowJar.archivePath
            memorySize = 512
            timeout = 20
        }

        task invoke(type: AWSLambdaInvokeTask) {
            functionName = "grachio"
            invocationType = InvocationType.RequestResponse
            // payload = '{"name":"Fred"}'
            doLast {
                println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
            }
        }
    }
    </code>

section
  h3 Lambda Micronaut Demo time!