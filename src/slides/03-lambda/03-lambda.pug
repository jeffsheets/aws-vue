section
  h1 Lambda & Micronaut

section
  h2 Data Migrations
  ul
    li Traditional DBA workflow to manually add columns and seed data will not scale
    li Maintaining 10s to 100s to 1000s of tenant schemas
    li Use Flyway Database Migrations
      ul
        li or Liquibase if you love XML

section
  img(src="../../../resources/images/flyway.png")
  h3 Flyway DB Migrations
  ul
    li Version control for your database
    li Commit DDL and Data migration scripts to the project repo
    li Every code version is now tied to an exact database DDL version, cool!

section
  h4 DB Migration File
  pre.
    <code class="sql" data-trim data-noescape contentEditable>
    CREATE TABLE FancyReport
    (
        ID BIGINT(20) UNSIGNED PRIMARY KEY NOT NULL AUTO_INCREMENT,
        UUID VARCHAR(50) NOT NULL,

        Start DATETIME NOT NULL,
        End DATETIME NOT NULL,
        Duration BIGINT(20) NOT NULL,
        Location VARCHAR(512),

        NumProcessed BIGINT(20) UNSIGNED NOT NULL,
        LastProcessedId BIGINT(20) UNSIGNED
    );

    </code>

section
  h3 How does Flyway work?
  ul
    li SCHEMA_VERSION table keeps track of which scripts have been applied
    li Scripts are ordered by filename numbering, so next script gets next number
    li Flyway scans files and applies scripts during Spring Boot startup

section
  h3 Flyway Tips
  ul
    li Just use numbers in filenames, helps with dev branch merges
      ul
        li v1.10.sql, not v1.10_customer_table.sql
    li Use migrations when running Unit/Int Tests!
    li DO NOT modify a flyway file after it has been deployed
      ul
        li The stored file hash will no longer match, causing startup to fail

section
  img.large(src="../../../resources/images/flyway-file-hell.png")
  h4 Flyway file mess

section
  h3 Multitenant Scripts
  ul
    li Keep DDL scripts in separate folder than data load
    li Schema load scripts are same for all tenants
    li Data Load scripts are tenant-specific
    li You may want a tool to manage tenant data

section
  h3 Multitenant Migrations
  ul
    li You DEFINITELY need a script to run migrations
      |  against all tenant schemas on deploy
      ul
        li Easy with Gradle + Jenkins
    li Disable the spring boot automatic flyway migrations for deployments
      ul
        li Enabled for local and tests

section
  img(src="../../../resources/images/mariadb.png")
  h3 MariaDB4j
  ul
    li
      a(href="https://mariadb.org/", target="_blank") MariaDB
      |  is the new open source MySQL
    li
      a(href="https://github.com/vorburger/MariaDB4j", target="_blank") MariaDB4j
      |  is a Java/Spring wrapper
    li Embedded database for local and CI tests
    li Similar to H2 but uses MariaDB
    li Spins up DB at Boot Startup

section
  h2 MariaDB4j - Pros
  ul
    li Can persist db to filesystem for local development
    li Creates clean db for every test run, then destroys it
    li Eliminates need to install MariaDB locally
    li SQL migrations locally to better match than H2

section
  h2 MariaDB4j - Cons
  ul
    li Slower startup than H2 - 30 seconds or so
    li Have to run local server to connect with DB Tools

section
  h2 MariaDB4j
  pre.small.
    <code class="groovy" data-trim data-noescape contentEditable>  @Configuration
      @Profile(['local', 'integrationTest'])
      class EmbeddedMariaDbConfig {

      @Bean MariaDB4jSpringService mariaDB4jSpringService() {
        new MariaDB4jSpringService() }

      @Bean DataSource dataSource(
      MariaDB4jSpringService mariaDB4jSpringService,
      @Value('${mariaDB4j.databaseName}') String databaseName,
      @Value('${spring.datasource.username}') String datasourceUsername,
      @Value('${spring.datasource.password}') String datasourcePassword,
      @Value('${spring.datasource.driver-class-name}') String datasourceDriver) {
          mariaDB4jSpringService.getDB().createDB(databaseName)

          DBConfigurationBuilder config = mariaDB4jSpringService.getConfiguration()
          DataSourceBuilder.create()
            .username(datasourceUsername).password(datasourcePassword)
            .url(config.getURL(databaseName))
            .driverClassName(datasourceDriver).build()
        }
      }
    </code>
